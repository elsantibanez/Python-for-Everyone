Chapter 12 Network programs

Exercise 1: Change the socket program socket1.py to prompt the user for the URL so it can read any web page.
You can use split('/') to break the URL into its component parts so you can extract the host name for the socket connect call. Add error checking using try and except to handle the condition where the user enters an improperly formatted or non-existent URL.

my solution does prompt the user for a website address but it has to be in the format http:/www.py4e.com for it to work.

import socket
mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
user_input = input('Enter a URL: ')
try:
    user_input2 = user_input.split('/')  # split the input
    host = user_input2[2]  # get the host name
    mysock.connect((host, 80))  # connect to the host
    cmd = 'GET ' + user_input + ' HTTP/1.0\r\n\r\n'  # send the command to the host
    cmd = cmd.encode()
    mysock.send(cmd)
    while True:
        data = mysock.recv(512)
        if len(data) < 1:
            break
        print(data.decode(), end='')
    mysock.close()
except:
    print('Invalid URL')
    quit()

Exercise 5:
Had to use Github AI in helping me figure this out :-)

mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
mysock.connect(('data.pr4e.org', 80))
cmd = 'GET http://data.pr4e.org/romeo.txt HTTP/1.0\r\n\r\n'.encode()
mysock.send(cmd)
total_bdata = b""   # create a byte string
while True:
    data = mysock.recv(512)
    if len(data) < 1:
        break
    
    total_bdata += data  # append data to total_bdata
total_bdata = total_bdata.split(b'\r\n\r\n')  # split the total_bdata
total_bdata = total_bdata[1]  # get the second part of the split
total_bdata = total_bdata.strip()  # strip the total_bdata
total_bdata = total_bdata.decode()  # decode the total_bdata
print(total_bdata)  # print the total_bdata
mysock.close()  # close the socket
